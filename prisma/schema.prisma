// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  email     String    @unique
  name      String?
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Project {
  id             String           @id @default(cuid())
  title          String
  description    String?
  status         String           @default("active") // active, completed, archived
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  successCriteria SuccessCriteria[]
  targets        Target[]
  chunks         Chunk[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model SuccessCriteria {
  id          String   @id @default(cuid())
  level       String   // small, medium, elite, moonshot
  description String?
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Target {
  id        String   @id @default(cuid())
  content   String
  notes     String?
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chunk {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      @default(0)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id        String   @id @default(cuid())
  content   String
  status    String   @default("pending") // pending, in-progress, completed
  order     Int      @default(0)
  chunkId   String
  chunk     Chunk    @relation(fields: [chunkId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
